services:
  professional-mastodon-instance-web:
    image: tootsuite/mastodon:v4.2.11
    container_name: professional-mastodon-instance-web
    restart: always
    env_file: .env
    command: bash -c "rm -f /mastodon/tmp/pids/server.pid; bundle exec rails s -p 3000"
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider --proxy=off localhost:3000/health || exit 1"]
    expose:
      - "3000"
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.professional-mastodon-instance-web.loadbalancer.server.port=3000"
      - "traefik.http.routers.professional-mastodon-instance-web.rule=Host(`${WEB_DOMAIN}`)"
      - "traefik.http.routers.professional-mastodon-instance-web.entrypoints=websecure"
      - "traefik.http.routers.professional-mastodon-instance-web.tls.certresolver=letsencrypt"
    volumes:
      - ./data/public/system:/mastodon/public/system

  professional-mastodon-instance-streaming:
    image: tootsuite/mastodon:v4.2.11
    container_name: professional-mastodon-instance-streaming
    restart: always
    env_file: .env
    command: node ./streaming
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider --proxy=off localhost:4000/api/v1/streaming/health || exit 1"]
    expose:
      - "4000"
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.professional-mastodon-instance-streaming.loadbalancer.server.port=4000"
      - "traefik.http.routers.professional-mastodon-instance-streaming.rule=(Host(`${WEB_DOMAIN}`) && PathPrefix(`/api/v1/streaming`))"
      - "traefik.http.routers.professional-mastodon-instance-streaming.entrypoints=websecure"
      - "traefik.http.routers.professional-mastodon-instance-streaming.tls.certresolver=letsencrypt"

  professional-mastodon-instance-sidekiq:
    image: tootsuite/mastodon:v4.2.11
    container_name: professional-mastodon-instance-sidekiq
    restart: always
    env_file: .env
    command: bundle exec sidekiq
    volumes:
      - ./data/public/system:/mastodon/public/system

  # this is temporary
  professional-mastodon-old-domain:
    image: traefik/whoami:latest
    container_name: professional-mastodon-old-domain
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.middlewares.professional-mastodon-old-domain-redirection.redirectregex.regex=^https?://${ALTERNATE_DOMAINS}(.*)"
      - "traefik.http.middlewares.professional-mastodon-old-domain-redirection.redirectregex.replacement=https://${WEB_DOMAIN}$${1}"
      - "traefik.http.middlewares.professional-mastodon-old-domain-redirection.redirectregex.permanent=true"
      - "traefik.http.routers.professional-mastodon-old-domain.rule=Host(`${ALTERNATE_DOMAINS}`)"
      - "traefik.http.routers.professional-mastodon-old-domain.entrypoints=websecure"
      - "traefik.http.routers.professional-mastodon-old-domain.tls.certresolver=letsencrypt"
      - "traefik.http.routers.professional-mastodon-old-domain.middlewares=professional-mastodon-old-domain-redirection@docker"

  professional-mastodon-instance-postgres:
    # How to upgrade to a major version
    # https://github.com/tianon/docker-postgres-upgrade
    image: postgres:15.4-alpine
    container_name: professional-mastodon-instance-postgres
    restart: always
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
    volumes:
      - ./postgres/15/data:/var/lib/postgresql/data
    secrets:
      - postgres-password
    environment:
      - TZ=UTC
      - PGTZ=UTC
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres-password

  professional-mastodon-instance-postgres-backup:
    image: tiredofit/db-backup:3.9.11
    container_name: professional-mastodon-instance-postgres-backup
    restart: always
    volumes:
      - ./postgres-backup/data:/backup
    secrets:
      - postgres-password
    environment:
      - CONTAINER_ENABLE_MONITORING=FALSE
      - DB_TYPE=pgsql
      - DB_HOST=professional-mastodon-instance-postgres
      - DB_NAME=ALL
      - DB_USER=postgres
      - DB_PASS_FILE=/run/secrets/postgres-password
      - DB_DUMP_FREQ=180 # backup every 3 hours
      - DB_CLEANUP_TIME=10080 # keep backups for a week
      - CREATE_LATEST_SYMLINK=FALSE
      - CHECKSUM=SHA1
      - COMPRESSION=GZ
      - GZ_RSYNCABLE=TRUE

  professional-mastodon-instance-redis:
    image: redis:7.2.0-alpine
    container_name: professional-mastodon-instance-redis
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
    volumes:
      - ./redis/data:/data

  professional-mastodon-instance-redis-backup:
    image: tiredofit/db-backup:3.9.11
    container_name: professional-mastodon-instance-redis-backup
    restart: always
    volumes:
      - ./redis-backup/data:/backup
    environment:
      - CONTAINER_ENABLE_MONITORING=FALSE
      - DB_TYPE=redis
      - DB_HOST=professional-mastodon-instance-redis
      - DB_DUMP_FREQ=60 # backup every hour
      - DB_CLEANUP_TIME=10080 # keep backups for a week
      - CREATE_LATEST_SYMLINK=FALSE
      - CHECKSUM=SHA1
      - COMPRESSION=GZ
      - GZ_RSYNCABLE=TRUE

networks:
  default:
    name: intranet
    external: true

secrets:
  postgres-password:
    file: ./postgres/secrets/postgres-password.txt
