version: "3.8"

services:
  docker-socket-proxy:
    image: tecnativa/docker-socket-proxy:latest
    container_name: docker-socket-proxy
    restart: always
    networks:
      - docker-socket-proxy
    ports:
      - 2375
    environment:
      CONTAINERS: 1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  ddns:
    image: qmcgaw/ddns-updater:latest
    container_name: ddns
    ports:
      - 8000:8000
    volumes:
      - ./ddns:/updater/data
    restart: always

  # local only for now
  pgadmin:
    image: dpage/pgadmin4:7.6
    container_name: pgadmin
    restart: always
    ports:
      - 8888:80
    volumes:
      # https://github.com/pgadmin-org/pgadmin4/blob/d2c3ab884450ad4dfacd8e5cb4d4b15c0bbe60f1/Dockerfile#L197
      # chown 5050:root -R ./pgadmin/data
      - ./pgadmin/data:/var/lib/pgadmin
    secrets:
      - pgadmin-password
    environment:
      - PGADMIN_DEFAULT_EMAIL=gab@100terres.com
      - PGADMIN_DEFAULT_PASSWORD_FILE=/run/secrets/pgadmin-password

  postgres:
    # How to upgrade to a major version
    # https://github.com/tianon/docker-postgres-upgrade
    image: postgres:15.3-alpine
    container_name: postgres
    restart: always
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
    volumes:
      - ./postgres/15/data:/var/lib/postgresql/data
    secrets:
      - postgres-password
    environment:
      - TZ=UTC
      - PGTZ=UTC
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres-password

  postgres-backup:
    image: tiredofit/db-backup:3.9.11
    container_name: postgres-backup
    restart: always
    volumes:
      - ./postgres-backup/data:/backup
    secrets:
      - postgres-password
    environment:
      - CONTAINER_ENABLE_MONITORING=FALSE
      - DB_TYPE=pgsql
      - DB_HOST=postgres
      - DB_NAME=ALL
      - DB_USER=postgres
      - DB_PASS_FILE=/run/secrets/postgres-password
      - DB_DUMP_FREQ=180 # backup every 3 hours
      - DB_CLEANUP_TIME=10080 # keep backups for a week
      - CREATE_LATEST_SYMLINK=FALSE
      - CHECKSUM=SHA1
      - COMPRESSION=GZ
      - GZ_RSYNCABLE=TRUE

  redis:
    image: redis:7.2.0-alpine
    container_name: redis
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
    volumes:
      - ./redis/data:/data

  redis-backup:
    image: tiredofit/db-backup:3.9.11
    container_name: redis-backup
    restart: always
    volumes:
      - ./redis-backup/data:/backup
    environment:
      - CONTAINER_ENABLE_MONITORING=FALSE
      - DB_TYPE=redis
      - DB_HOST=redis
      - DB_DUMP_FREQ=60 # backup every hour
      - DB_CLEANUP_TIME=10080 # keep backups for a week
      - CREATE_LATEST_SYMLINK=FALSE
      - CHECKSUM=SHA1
      - COMPRESSION=GZ
      - GZ_RSYNCABLE=TRUE

  traefik:
    image: traefik:v2.10.4
    container_name: traefik
    restart: always
    networks:
      - default
      - docker-socket-proxy
    depends_on:
      - docker-socket-proxy
    command:
      # - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.endpoint=tcp://docker-socket-proxy:2375"
      - "--providers.docker.network=docker-socket-proxy"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      # - "--certificatesresolvers.letsencrypt.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.letsencrypt.acme.email=letsencrypt@100terres.com"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
    ports:
      - 80:80 # http
      - 443:443 # https
      - 8080:8080 # traefik dashboard
    volumes:
      - ./letsencrypt:/letsencrypt

networks:
  default:
    name: intranet
  docker-socket-proxy:
    name: docker-socket-proxy

secrets:
  pgadmin-password:
    file: ./pgadmin/secrets/pgadmin-password.txt
  postgres-password:
    file: ./postgres/secrets/postgres-password.txt
